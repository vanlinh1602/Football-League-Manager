{"version":3,"file":"static/js/728.9a4d7ea6.chunk.js","mappings":"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","sources":["components/Header/index.tsx","features/players/store/saga.ts","features/players/store/index.ts","features/players/store/reducer.ts","features/players/store/selectors.ts","features/teams/store/selectors.ts","lib/options.ts","features/players/components/PlayerCard/index.tsx","features/players/components/PlayerEditor/index.tsx","pages/Players/index.tsx","utils/commons.ts","utils/image.ts"],"sourcesContent":["import { PageHeader } from 'antd';\n\ntype Props = {\n  content: any;\n};\n\nconst Header = ({ content }: Props) => (\n  <PageHeader style={{ backgroundColor: 'white', marginBottom: 5, height: 64 }}>\n    {content}\n  </PageHeader>\n);\n\nexport default Header;\n","import type { PayloadAction } from '@reduxjs/toolkit';\nimport { notification } from 'antd';\nimport _ from 'lodash';\nimport { all, put, select, takeEvery } from 'redux-saga/effects';\nimport { backendService } from 'services';\nimport formatError from 'utils/formatError';\n\nimport type { Player } from '../types';\nimport { actions as playersAction } from './reducer';\nimport { selectPlayersOfTeams } from './selectors';\n\nfunction* getPlayers(action: PayloadAction<string>) {\n  try {\n    const team = action.payload;\n    const result: WithApiResult<Player[]> = yield backendService.post('api/getPlayers', { team });\n    if (result.kind === 'ok') {\n      if (result.data.length) {\n        const players = _.keyBy(result.data, 'id');\n        yield put(playersAction.fetchPlayers({ team, players }));\n      } else {\n        yield put(playersAction.fetchPlayers());\n      }\n    } else {\n      yield put(playersAction.fetchPlayers());\n      notification.error({\n        message: 'Lỗi tra cứu',\n        description: formatError(result),\n      });\n    }\n  } catch (error) {\n    yield put(playersAction.fetchPlayers());\n    notification.error({\n      message: 'Lỗi tra cứu',\n      description: formatError(error),\n    });\n  }\n}\n\nfunction* updatePlayer(action: PayloadAction<Player>) {\n  try {\n    const playerData = action.payload;\n    const { team, id } = playerData;\n\n    const playersTeam: CustomObject<Player> = yield select((state) =>\n      selectPlayersOfTeams(state, team)\n    );\n    const result: WithApiResult<string> = yield backendService.post('api/updatePlayer', {\n      data: playerData,\n    });\n\n    if (result.kind === 'ok') {\n      const dataUpdate = _.cloneDeep(playersTeam);\n      _.set(dataUpdate, [id], playerData);\n\n      yield put(playersAction.fetchPlayers({ team, players: dataUpdate }));\n    } else {\n      yield put(playersAction.fetchPlayers());\n      notification.error({\n        message: 'Lỗi cập nhật',\n        description: formatError(result),\n      });\n    }\n  } catch (error) {\n    yield put(playersAction.fetchPlayers());\n    notification.error({\n      message: 'Lỗi cập nhập',\n      description: formatError(error),\n    });\n  }\n}\n\nexport default function* saga() {\n  yield all([\n    takeEvery(playersAction.getPlayers.type, getPlayers),\n    takeEvery(playersAction.updatePlayer.type, updatePlayer),\n  ]);\n}\n","import { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';\n\nimport { actions, key, reducer } from './reducer';\nimport saga from './saga';\n\nexport const usePlayerSlide = () => {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({\n    key,\n    saga,\n  });\n  return { actions };\n};\n","import type { PayloadAction } from '@reduxjs/toolkit';\nimport { createSlice } from 'utils/@reduxjs/toolkit';\n\nimport type { Player, PlayersStore } from '../types';\n\nexport const initialState: PlayersStore = { handling: false };\n\nconst slice = createSlice({\n  name: 'playerStore',\n  initialState,\n  reducers: {\n    fetchPlayers(\n      state,\n      action: PayloadAction<{ team: string; players: CustomObject<Player> } | undefined>\n    ) {\n      state.handling = false;\n      if (action.payload) {\n        const { team, players } = action.payload;\n        state.data = {\n          ...state.data,\n          [team]: players,\n        };\n      }\n    },\n    getPlayers(state, _action: PayloadAction<string>) {\n      state.handling = true;\n    },\n    updatePlayer(state, _action: PayloadAction<Player>) {\n      state.handling = true;\n    },\n  },\n});\n\nexport const { actions, name: key, reducer } = slice;\n","import { createSelector } from '@reduxjs/toolkit';\nimport type { RootState } from 'types';\n\nimport { initialState } from './reducer';\n\nconst selectDomain = (state: RootState) => state?.playerStore || initialState;\nconst selectPath = (state: RootState, path: string) => path;\n\nexport const selectPlayerHandling = createSelector([selectDomain], (state) => state.handling);\n\nexport const selectLayers = createSelector([selectDomain], (state) => state.data);\n\nexport const selectPlayersOfTeams = createSelector(\n  [selectLayers, selectPath],\n  (players, path) => players?.[path]\n);\n","import { createSelector } from '@reduxjs/toolkit';\nimport type { RootState } from 'types';\n\nimport { initialState } from './reducer';\n\nconst selectDomain = (state: RootState) => state?.teamStore || initialState;\n\nexport const selectTeamHandling = createSelector([selectDomain], (state) => state.handling);\n\nexport const selectTeamData = createSelector([selectDomain], (state) => state.data);\n","import countryJson from './countries.json';\n\nexport const FONTS = ['Mynerve', 'Bangers', 'Fruktur', 'Gluten', 'Roboto', 'SedgwickAveDisplay'];\n\nexport const linearGradientColor = [\n  ['#E54D24', '#DDB249'],\n  ['#ED4264', '#FFEDBC'],\n  ['#6D53DC', '#DB8282'],\n  ['#539566', '#72A5C2'],\n  ['#8D60BE', '#F2D49E'],\n  ['#A446A4', '#83A5BE'],\n  ['#6D53DC', '#DC5356'],\n  ['#D9B967', '#8EC3A7'],\n  ['#F08686', '#9CC495'],\n];\n\nexport const playerRoles: CustomObject<string> = {\n  GK: 'Goalkeeper',\n  CB: 'Center back',\n  WB: 'Wing back',\n  CDM: 'Defensive Midfielder',\n  CM: 'Central Midfielder',\n  ST: 'Striker',\n  W: 'Winger',\n};\n\nexport const events: CustomObject<string> = {\n  shots: 'Shots',\n  goals: 'Goals',\n  offSide: 'Offside',\n  cornerKick: 'Corner Kick',\n  errors: 'Errors',\n  redCard: 'Red Card',\n  yellowCard: 'Yellow Card',\n};\n\nexport const countryOptions = countryJson.map(({ name, code }) => ({ label: name, value: code }));\n","import { EditOutlined } from '@ant-design/icons';\nimport { Card, Col, Popover, Row, Typography } from 'antd';\nimport type { Player } from 'features/players/types';\nimport { linearGradientColor, playerRoles } from 'lib/options';\nimport _ from 'lodash';\nimport moment from 'moment';\n\ntype Props = {\n  info: Player;\n  handleEdit: () => void;\n};\n\nconst PlayerCard = ({ info, handleEdit }: Props) => {\n  const linearColor = linearGradientColor[_.random(0, linearGradientColor.length - 1)];\n  const { name, avatar, birthday, role } = info;\n\n  return (\n    <Card\n      style={{\n        width: '90%',\n        margin: '20px',\n        borderRadius: '20px',\n        backgroundImage: `linear-gradient(to bottom right, ${linearColor[0]}, ${linearColor[1]})`,\n        overflow: 'hidden',\n      }}\n      bodyStyle={{ borderRadius: 12 }}\n      cover={\n        <img\n          alt=\"\"\n          src={avatar}\n          style={{\n            height: 200,\n            objectFit: 'cover',\n          }}\n        />\n      }\n      actions={[\n        <Popover content=\"Chỉnh sửa thông tin\">\n          <EditOutlined key=\"edit\" onClick={handleEdit} />,\n        </Popover>,\n      ]}\n    >\n      <div\n        style={{\n          width: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          textAlign: 'center',\n          flexDirection: 'column',\n        }}\n      >\n        <Col style={{ marginBottom: 5 }}>\n          <Typography style={{ fontWeight: 'bold', fontSize: 24, color: 'white' }}>\n            {name}\n          </Typography>\n        </Col>\n        <Row justify=\"space-between\" style={{ width: '100%', textAlign: 'center' }}>\n          <Col>\n            <Typography>Age</Typography>\n            <Typography style={{ fontWeight: 'bold' }}>\n              {moment().year() - moment(birthday).year()}\n            </Typography>\n          </Col>\n          <Col style={{ paddingLeft: 15 }}>\n            <Typography>Position</Typography>\n            <Typography style={{ fontWeight: 'bold' }}>{playerRoles[role]}</Typography>\n          </Col>\n          <Col>\n            <Typography>Contry</Typography>\n            <Typography style={{ fontWeight: 'bold' }}>VN</Typography>\n          </Col>\n        </Row>\n      </div>\n    </Card>\n  );\n};\n\nexport default PlayerCard;\n","import {\n  Button,\n  Col,\n  DatePicker,\n  Form,\n  Input,\n  InputNumber,\n  Modal,\n  Row,\n  Select,\n  Upload,\n} from 'antd';\nimport type { RcFile } from 'antd/lib/upload';\nimport { usePlayerSlide } from 'features/players/store';\nimport type { Player } from 'features/players/types';\nimport { countryOptions, playerRoles } from 'lib/options';\nimport moment from 'moment';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { generateID } from 'utils/commons';\nimport { getBase64 } from 'utils/image';\n\ntype Props = {\n  info: Partial<Player>;\n  onClose: () => void;\n};\n\nconst PlayerEditor = ({ info, onClose }: Props) => {\n  const dispatch = useDispatch();\n  const { actions } = usePlayerSlide();\n  const [form] = Form.useForm<Player>();\n  const [image, setImage] = useState<string>(info.avatar || '');\n  const handlerUpload = async (file: RcFile) => {\n    const base64 = await getBase64(file);\n    setImage(base64);\n  };\n\n  const handleSave = async () => {\n    try {\n      const formData = await form.validateFields();\n      if (!image) {\n        Modal.warn({ title: 'Thiếu thông tin', content: 'Vui lòng chọn hình ảnh' });\n        return;\n      }\n\n      if (formData.birthday) {\n        formData.birthday = formData.birthday.valueOf();\n      }\n\n      const dataUpdate: Player = {\n        ...info,\n        ...formData,\n        avatar: image,\n      };\n\n      if (!dataUpdate.id) {\n        dataUpdate.id = generateID();\n      }\n\n      dispatch(actions.updatePlayer(dataUpdate));\n      onClose();\n    } catch {}\n  };\n\n  return (\n    <Modal\n      width={700}\n      open\n      title={`${info.id ? 'Sửa' : 'Thêm'} cầu thủ`}\n      onCancel={onClose}\n      footer={[\n        <Button type=\"primary\" onClick={handleSave}>\n          Lưu\n        </Button>,\n      ]}\n    >\n      <Form\n        form={form}\n        layout=\"vertical\"\n        initialValues={{ ...info, birthday: info.birthday ? moment(info.birthday) : '' } ?? {}}\n      >\n        <Row gutter={10}>\n          <Col span={8}>\n            <Upload.Dragger\n              name=\"file\"\n              accept=\"image/*\"\n              height={240}\n              listType=\"picture\"\n              showUploadList={false}\n              beforeUpload={handlerUpload}\n            >\n              {image ? (\n                <img src={image} alt=\"avatar\" style={{ width: '100%' }} />\n              ) : (\n                <div>Thêm hình ảnh</div>\n              )}\n            </Upload.Dragger>\n          </Col>\n          <Col span={16}>\n            <Form.Item name=\"name\" label=\"Tên\" rules={[{ required: true }]}>\n              <Input />\n            </Form.Item>\n            <Form.Item name=\"birthday\" label=\"Ngày sinh\">\n              <DatePicker style={{ width: '100%' }} format=\"D/M/Y\" />\n            </Form.Item>\n            <Form.Item name=\"country\" label=\"Quốc gia\" rules={[{ required: true }]}>\n              <Select options={countryOptions} />\n            </Form.Item>\n            <Form.Item name=\"number\" label=\"Số áo\" rules={[{ required: true }]}>\n              <InputNumber controls={false} />\n            </Form.Item>\n            <Form.Item name=\"role\" label=\"Vai trò\" rules={[{ required: true }]}>\n              <Select\n                options={Object.entries(playerRoles).map(([id, name]) => ({\n                  label: name,\n                  value: id,\n                }))}\n              />\n            </Form.Item>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <Form.Item name=\"description\" label=\"Mô tả\">\n              <Input.TextArea style={{ width: '100%' }} />\n            </Form.Item>\n          </Col>\n        </Row>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default PlayerEditor;\n","import { Button, Col, Layout, notification, Row, Select, Typography } from 'antd';\nimport { Header, Waiting } from 'components';\nimport { PlayerCard, PlayerEditor } from 'features/players/components';\nimport { usePlayerSlide } from 'features/players/store';\nimport { selectPlayerHandling, selectPlayersOfTeams } from 'features/players/store/selectors';\nimport type { Player } from 'features/players/types';\nimport { selectTeamData, selectTeamHandling } from 'features/teams/store/selectors';\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport type { RootState } from 'types';\n\nconst Players = () => {\n  const { team: teamId } = useParams();\n\n  const dispatch = useDispatch();\n  const { actions: playersAction } = usePlayerSlide();\n  const allTeams = useSelector(selectTeamData);\n\n  const playersHandling = useSelector(selectPlayerHandling);\n  const teamsHandling = useSelector(selectTeamHandling);\n\n  const [team, setTeam] = useState(teamId || '');\n  const [editPlayer, setEditPlayer] = useState<Partial<Player>>();\n\n  const players = useSelector((state: RootState) => selectPlayersOfTeams(state, team));\n  useEffect(() => {\n    if (teamId && !players) {\n      dispatch(playersAction.getPlayers(team));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <div>\n      {teamsHandling || playersHandling ? <Waiting /> : null}\n      {editPlayer ? (\n        <PlayerEditor info={editPlayer} onClose={() => setEditPlayer(undefined)} />\n      ) : null}\n      <Header\n        content={\n          <Row align=\"middle\" justify=\"space-between\">\n            <Col>\n              <Typography.Title level={4}>Danh sách cầu thủ</Typography.Title>\n            </Col>\n            <Col>\n              <Row gutter={10} align=\"middle\">\n                <Col>Chọn đội</Col>\n                <Col>\n                  <Select\n                    value={team}\n                    options={Object.values(allTeams ?? {}).map((data) => ({\n                      label: data.name,\n                      value: data.id,\n                    }))}\n                    style={{ width: 150 }}\n                    onChange={(value: string) => setTeam(value)}\n                  />\n                </Col>\n                <Col>\n                  <Button\n                    type=\"primary\"\n                    onClick={() => {\n                      dispatch(playersAction.getPlayers(team));\n                    }}\n                  >\n                    Tìm kiếm\n                  </Button>\n                </Col>\n                <Col style={{ float: 'right', position: 'relative' }}>\n                  <Button\n                    type=\"text\"\n                    style={{ backgroundColor: '#82c91e', color: 'white' }}\n                    onClick={() => {\n                      if (!team) {\n                        notification.warning({\n                          message: 'Vui lòng chọn đội bóng',\n                        });\n                        return;\n                      }\n                      setEditPlayer({ team });\n                    }}\n                  >\n                    Thêm cầu thủ\n                  </Button>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        }\n      />\n      <Layout style={{ overflowY: 'scroll', height: window.innerHeight - 100 }}>\n        <Row>\n          {Object.values(players ?? {}).map((player) => (\n            <Col span={6}>\n              <PlayerCard info={player} handleEdit={() => setEditPlayer(player)} />\n            </Col>\n          ))}\n        </Row>\n      </Layout>\n    </div>\n  );\n};\n\nexport default Players;\n","import _ from 'lodash';\nimport moment from 'moment';\nimport { nanoid } from 'nanoid';\n\nexport const getYearOptions = () => {\n  const currentYear = moment().year();\n  return _.range(currentYear - 10, currentYear + 10).map((year) => ({\n    label: `Năm ${year}`,\n    value: year,\n  }));\n};\n\nexport const generateID = (\n  ids: string[] = [],\n  size = 10,\n  options: { prefix?: string; suffix?: string } = {}\n): string => {\n  const id = `${options.prefix ?? ''}${nanoid(size)}${options.suffix ?? ''}`;\n  if (ids.includes(id)) return generateID(ids, size, options);\n  return id;\n};\n\nexport const parseFullName = (fullName: string) => {\n  const words = _.split(fullName, ' ');\n  return {\n    firstName: _.join(_.dropRight(words), ' '),\n    lastName: _.last(words),\n  };\n};\n","import type { RcFile } from 'antd/lib/upload';\n\nexport const getBase64 = (file: RcFile): Promise<string> =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve((reader.result as string).toString());\n    reader.onerror = (error) => reject(error);\n  });\n\nexport const getUrlImageBase64 = (base64: string) => `data:image/jpeg;base64,${base64}`;\n"],"names":["_ref","content","_jsx","PageHeader","style","backgroundColor","marginBottom","height","children","getPlayers","action","team","payload","result","backendService","post","kind","data","length","players","_","put","playersAction","fetchPlayers","notification","error","message","description","formatError","updatePlayer","playerData","id","playersTeam","select","state","selectPlayersOfTeams","dataUpdate","saga","all","takeEvery","type","usePlayerSlide","useInjectReducer","key","reducer","useInjectSaga","actions","initialState","handling","slice","createSlice","name","reducers","_action","selectDomain","playerStore","selectPlayerHandling","createSelector","selectLayers","selectPath","path","teamStore","selectTeamHandling","selectTeamData","linearGradientColor","playerRoles","GK","CB","WB","CDM","CM","ST","W","events","shots","goals","offSide","cornerKick","errors","redCard","yellowCard","countryOptions","countryJson","map","code","label","value","info","handleEdit","linearColor","avatar","birthday","role","Card","width","margin","borderRadius","backgroundImage","concat","overflow","bodyStyle","cover","alt","src","objectFit","_jsxs","Popover","EditOutlined","onClick","display","alignItems","textAlign","flexDirection","Col","Typography","fontWeight","fontSize","color","Row","justify","moment","year","paddingLeft","_info$birthday","onClose","dispatch","useDispatch","form","Form","useForm","image","setImage","useState","Modal","open","title","onCancel","footer","Button","async","formData","validateFields","warn","valueOf","generateID","layout","initialValues","gutter","span","Upload","Dragger","accept","listType","showUploadList","beforeUpload","base64","getBase64","file","Item","rules","required","Input","DatePicker","format","Select","options","InputNumber","controls","Object","entries","_ref2","TextArea","Players","teamId","useParams","allTeams","useSelector","playersHandling","teamsHandling","setTeam","editPlayer","setEditPlayer","useEffect","Waiting","PlayerEditor","undefined","Header","align","Title","level","values","onChange","float","position","warning","Layout","overflowY","window","innerHeight","player","PlayerCard","_options$prefix","_options$suffix","ids","arguments","size","prefix","nanoid","suffix","includes","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","toString","onerror"],"sourceRoot":""}